package processing.test.emoreal;

/* autogenerated by Processing revision 1293 on 2024-05-30 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import http.requests.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class EmoReal extends PApplet {



String url = "https://script.google.com/macros/s/AKfycbz0AJC0ND9DwU_I9QQyz0LJq2yPMY9cRAzZu5-lcXW1U_QxKamrfqpgfB9tFHFS5nVa0g/exec";


Emoji e[];
RepresentativeEmoji rep_e[];
ChildEmoji child_e[];
DrawText t;
DrawEmoji Draw_Emoji;
RepresentativeEmoji selected_Emoji;
Emoji send_Emoji;
Emoji sended_Emoji;

public void setup() {
  /* size commented out by preprocessor */;
  textSize(25);
  background(255);


  e = new Emoji[24];
  rep_e = new RepresentativeEmoji[6];
  child_e = new ChildEmoji[4];
  t = new DrawText();

  for (int i=0; i<6; i++) {
    rep_e[i] = new RepresentativeEmoji(i);
  }

  Draw_Emoji = new DrawEmoji(rep_e);
}

public void draw() {
  background(255);
  t.kidoairaku();
  if (send_Emoji != null) {
    sendDataToGoogleSheets(str(send_Emoji.id));
    println("sended " + str(send_Emoji.id));
    sended_Emoji = send_Emoji;
    send_Emoji = null;
  }

  if (sended_Emoji == null) {
    t.drawInputEmoji();
  } else {
    t.drawSelectedEmoji(sended_Emoji, selected_Emoji != null);

  }
  Draw_Emoji.draw();
  if(selected_Emoji != null){
    selected_Emoji.drawChild();
    if(sended_Emoji != null){
      
    }
  }
  if (mousePressed) {
      //クリックした箇所にグレーの円を描画
      fill(100,100);
      noStroke();
      ellipse(mouseX, mouseY, 30, 30);
      noFill();
      stroke(1);
    }
}

//マウスがクリックされたときの処理
public void  mousePressed() {
  //6つの代表絵文字について領域内判定
  if (selected_Emoji == null) {
    for (int i = 0; i<rep_e.length; i++) {
      if (rep_e[i].isPressed(mouseX, mouseY)) {
        //println(i);
        //選択された絵文字以外を削除
        Draw_Emoji.delete(i);

        //現在選択されている絵文字を設定
        rep_e[i].isSelected = true;
        selected_Emoji = rep_e[i];
        break;
      }
    }
  }
}


public void mouseReleased() {
  for (int i=0; i<rep_e.length; i++) {
    rep_e[i].isSelected = false;
  }

  Draw_Emoji.display();
  for (int i=0; i<3; i++) {
    if (selected_Emoji != null)
      if (selected_Emoji.isPressed(mouseX, mouseY)) {
        send_Emoji = selected_Emoji;
        t.drawLoading();
      } else if (selected_Emoji.child[i].isPressed(mouseX, mouseY)) {
        send_Emoji = selected_Emoji.child[i];
        t.drawLoading();
      }
  }
  selected_Emoji = null;
}

public void sendDataToGoogleSheets(String data) {
  PostRequest post = new PostRequest(url);
  post.addData("data", data);
  post.send();
}
class ChildEmoji extends Emoji{
  int m;
  
   ChildEmoji(float x0, float y0, int n0, int m0){
    super();
    id = n0+m0+1;
    m  = m0;
    img = loadImage(str(id)+".png");
    
    
    if(0 <= n0/4 & n0/4 <= 2){
      x = x0 + 100*cos(PI*(n0/4+m)/4+PI);
      y = y0 + 100*sin(PI*(n0/4+m)/4+PI);
    }else if(3 <= n0/4 & n0/4 <= 5){
      x = x0 + 100*cos(PI*(n0/4+m+1)/4+PI);
      y = y0 + 100*sin(PI*(n0/4+m+1)/4+PI);
    }
  }
}
class DrawEmoji{
  Emoji e[];
  
  DrawEmoji(Emoji[] e0){
    e= e0;
  }
  
  public void draw(){
    for(int i=0;i<e.length;i++){
      e[i].draw();
    }
  }
  
  public void delete(int j){
    for(int i=0;i<e.length;i++){
      if(j != i){
        e[i].visible = false;
      }
    }
  }
  
  public void display(){
    for(int i=0;i<e.length; i++){
      e[i].visible = true;
    }
  }
  
  
}
class DrawText{
  PImage ki, d, ai, rk;
  
  DrawText(){
    ki = loadImage("ki.png");
    d = loadImage("do.png");
    ai = loadImage("ai.png");
    rk = loadImage("rk.png");
  }
  
  public void drawInputEmoji(){
    textAlign(CENTER);
    textSize(15);
    fill(100);
    text("current emotion", width/2, height/2-55);
    textSize(40);
    text("None", width/2, height/2+10);
    stroke(0);
    strokeWeight(1);
    noFill();
    
    rect(width/2-60, height/2-80, 120, 140);
  }
  
  public void drawSelectedEmoji(Emoji e, boolean isThin){
    textAlign(CENTER);
    textSize(15);
    fill(100);
    text("current emotion", width/2, height/2-55);
    
    stroke(0);
    strokeWeight(1);
    noFill();
    rect(width/2-60, height/2-80, 120, 140);
    e.drawCenter(isThin);
  }
  
  public void drawLoading(){
    fill(255);
    stroke(100);
    strokeWeight(3);
    rect(width/2-150, height/2-45, 300, 70);
    textAlign(CENTER);
    textSize(30);
    fill(100);
    text("Sending Your Emoji...", width/2, height/2);
    stroke(0);
    strokeWeight(1);
    noFill();
  }
  
  public void kidoairaku(){
    tint(255, 40);
    image(ki,width - 200, height - 150,200,200);
    image(d, width - 200, 0, 200, 200);
    image(ai, 0, 0, 200, 200);
    image(rk, 0, height - 150, 200, 200);
    tint(255,255);
  }
}
abstract class Emoji {
  float x,y;
  float r;
  int id;
  boolean visible;
  boolean isRed;
  PImage img;
  
  Emoji(){
    visible = true;
    r = 70;
  }
  
  public void draw(){
    if(visible){
      if(mousePressed & isPressed(mouseX, mouseY)){
        isRed = true;
      }else{
        isRed = false;
      }
      
      if(isRed){
        stroke(255,0,0);
        strokeWeight(7);
        ellipse(x,y,r-7,r-7);
        r = 90;
      }else{
        r = 70;
      }
      tint(255,255);
    }else{
      tint(255, 50);
    }
    image(img,x-r/2,y-r/2,r,r);
  }
  
  public boolean isPressed(int x0, int y0){
    return sq(x-x0)+sq(y-y0)<sq(r/2);
  }
  
  public void drawCenter(boolean isThin){
    if(isThin == true){
      tint(255, 50);
    }else{
      tint(255,255);
    }
    
    image(img,width/2-50,height/2-50,100,100);
  }
  
}
class RepresentativeEmoji extends Emoji {
  boolean isSelected;
  ChildEmoji[] child;

  RepresentativeEmoji(int n0) {
    super();
    isSelected = false;
    id = n0*4;
    x = width/2 + 150*cos(PI*n0/3+PI/6);
    y = height/2 + 150*sin(PI*n0/3+PI/6);
    img = loadImage(str(id)+".png");
    child = new ChildEmoji[3];
    for (int i=0; i<3; i++) {
      child[i] = new ChildEmoji(x, y, id, i);
    }
  }

  public void draw() {
    super.draw();
  }

  public void drawChild() {
    for (int i=0; i<3; i++) {
      child[i].draw();
    }
  }
}
/*
class Scene{
  int n;
  
  Scene(int n0){
    n = n0;
  }
  
  void draw(){
    if(n == 0){
      background(255);
      t.drawInputEmoji();
      for(int i=0;i<6;i++){
      e[i].draw();
  }
    else if (n == 1){
      
    }
  }
}
*/


  public void settings() { size(400, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "EmoReal" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
